remove.packages("AHPGaussian")
library(AHPGaussian)
ahpgaussian(warships)
teste <- ahpgaussian(warships)
teste
class(teste)
ahpgaussian <- function(x) {{stopifnot(is.data.frame(x))
x2 <- reshape2::melt(x, id.vars = c(1,dim(x)[2]), measure.vars = -c(1, dim(x)[2]))
x2$value <- ifelse(x2$min_max == "min", 1 / x2$value, x2$value)
x2 <- transform(x2,sum = ave(value, criteria, FUN = sum))
x2 <- transform(x2,norm = value / sum)
x2 <- transform(x2,mean = ave(norm, criteria, FUN = mean))
x2 <- transform(x2,sd = ave(norm, criteria, FUN = sd))
x2 <- transform(x2,factor = sd / mean)
x3 <- unique(x2[, c("criteria", "factor")])
x3$factor <- x3$factor / sum(x3$factor)
x4 <- x2[, c("criteria", "variable", "norm")]
x4 <- reshape2::dcast(x4, formula = criteria ~ variable, value.var = "norm")
x5 <- merge(x4, x3, by = "criteria")
x5 <- reshape2::melt(x5, id.vars = c("criteria","factor"), measure.vars = -c(1, dim(x)[2]))
x5$value_factor <- x5$factor * x5$value
x5 <- x5[, c("criteria", "variable", "value_factor")]
x5$punctuation <- ave(x5$value_factor, x5$variable, FUN = sum)
x5 <- x5[, c("variable", "punctuation")]
x5$variable <- as.factor(x5$variable)
x5$variable <- reorder(x5$variable, -x5$punctuation)
x5 <- droplevels(unique(x5))
x5 <- x5[order(x5$variable), ]
x5$rank <- 1
x5$rank <- ave(x5$rank, FUN = cumsum)
text(x = barplot(x5$punctuation, names.arg = x5$variable, col = x5$variable,
ylim = c(0, max(x5$punctuation) * 1.1)),
y = x5$punctuation,
labels = paste0(x5$rank),
pos = 3,
offset = 0.5)
}
results <- AHPGaussian(x2,x3,x5)
return(results)
}
teste <- ahpgaussian(warships)
ahpgaussian <- function(x) {{stopifnot(is.data.frame(x))
x2 <- reshape2::melt(x, id.vars = c(1,dim(x)[2]), measure.vars = -c(1, dim(x)[2]))
x2$value <- ifelse(x2$min_max == "min", 1 / x2$value, x2$value)
x2 <- transform(x2,sum = ave(value, criteria, FUN = sum))
x2 <- transform(x2,norm = value / sum)
x2 <- transform(x2,mean = ave(norm, criteria, FUN = mean))
x2 <- transform(x2,sd = ave(norm, criteria, FUN = sd))
x2 <- transform(x2,factor = sd / mean)
x3 <- unique(x2[, c("criteria", "factor")])
x3$factor <- x3$factor / sum(x3$factor)
x4 <- x2[, c("criteria", "variable", "norm")]
x4 <- reshape2::dcast(x4, formula = criteria ~ variable, value.var = "norm")
x5 <- merge(x4, x3, by = "criteria")
x5 <- reshape2::melt(x5, id.vars = c("criteria","factor"), measure.vars = -c(1, dim(x)[2]))
x5$value_factor <- x5$factor * x5$value
x5 <- x5[, c("criteria", "variable", "value_factor")]
x5$punctuation <- ave(x5$value_factor, x5$variable, FUN = sum)
x5 <- x5[, c("variable", "punctuation")]
x5$variable <- as.factor(x5$variable)
x5$variable <- reorder(x5$variable, -x5$punctuation)
x5 <- droplevels(unique(x5))
x5 <- x5[order(x5$variable), ]
x5$rank <- 1
x5$rank <- ave(x5$rank, FUN = cumsum)
text(x = barplot(x5$punctuation, names.arg = x5$variable, col = x5$variable,
ylim = c(0, max(x5$punctuation) * 1.1)),
y = x5$punctuation,
labels = paste0(x5$rank),
pos = 3,
offset = 0.5)
}
results <- list(x2,x3,x5)
return(results)
}
ahpgaussian <- function(x) {{stopifnot(is.data.frame(x))
x2 <- reshape2::melt(x, id.vars = c(1,dim(x)[2]), measure.vars = -c(1, dim(x)[2]))
x2$value <- ifelse(x2$min_max == "min", 1 / x2$value, x2$value)
x2 <- transform(x2,sum = ave(value, criteria, FUN = sum))
x2 <- transform(x2,norm = value / sum)
x2 <- transform(x2,mean = ave(norm, criteria, FUN = mean))
x2 <- transform(x2,sd = ave(norm, criteria, FUN = sd))
x2 <- transform(x2,factor = sd / mean)
x3 <- unique(x2[, c("criteria", "factor")])
x3$factor <- x3$factor / sum(x3$factor)
x4 <- x2[, c("criteria", "variable", "norm")]
x4 <- reshape2::dcast(x4, formula = criteria ~ variable, value.var = "norm")
x5 <- merge(x4, x3, by = "criteria")
x5 <- reshape2::melt(x5, id.vars = c("criteria","factor"), measure.vars = -c(1, dim(x)[2]))
x5$value_factor <- x5$factor * x5$value
x5 <- x5[, c("criteria", "variable", "value_factor")]
x5$punctuation <- ave(x5$value_factor, x5$variable, FUN = sum)
x5 <- x5[, c("variable", "punctuation")]
x5$variable <- as.factor(x5$variable)
x5$variable <- reorder(x5$variable, -x5$punctuation)
x5 <- droplevels(unique(x5))
x5 <- x5[order(x5$variable), ]
x5$rank <- 1
x5$rank <- ave(x5$rank, FUN = cumsum)
text(x = barplot(x5$punctuation, names.arg = x5$variable, col = x5$variable,
ylim = c(0, max(x5$punctuation) * 1.1)),
y = x5$punctuation,
labels = paste0(x5$rank),
pos = 3,
offset = 0.5)
}
}
ahpgaussian(warships)
teste <- ahpgaussian(warships)
teste
teste
x5$rank <- ave(x5$rank, FUN = cumsum)
ahpgaussian <- function(x) {{stopifnot(is.data.frame(x))
x2 <- reshape2::melt(x, id.vars = c(1,dim(x)[2]), measure.vars = -c(1, dim(x)[2]))
x2$value <- ifelse(x2$min_max == "min", 1 / x2$value, x2$value)
x2 <- transform(x2,sum = ave(value, criteria, FUN = sum))
x2 <- transform(x2,norm = value / sum)
x2 <- transform(x2,mean = ave(norm, criteria, FUN = mean))
x2 <- transform(x2,sd = ave(norm, criteria, FUN = sd))
x2 <- transform(x2,factor = sd / mean)
x3 <- unique(x2[, c("criteria", "factor")])
x3$factor <- x3$factor / sum(x3$factor)
x4 <- x2[, c("criteria", "variable", "norm")]
x4 <- reshape2::dcast(x4, formula = criteria ~ variable, value.var = "norm")
x5 <- merge(x4, x3, by = "criteria")
x5 <- reshape2::melt(x5, id.vars = c("criteria","factor"), measure.vars = -c(1, dim(x)[2]))
x5$value_factor <- x5$factor * x5$value
x5 <- x5[, c("criteria", "variable", "value_factor")]
x5$punctuation <- ave(x5$value_factor, x5$variable, FUN = sum)
x5 <- x5[, c("variable", "punctuation")]
x5$variable <- as.factor(x5$variable)
x5$variable <- reorder(x5$variable, -x5$punctuation)
x5 <- droplevels(unique(x5))
x5 <- x5[order(x5$variable), ]
x5$rank <- 1
x5$rank <- ave(x5$rank, FUN = cumsum)
text(x = barplot(x5$punctuation, names.arg = x5$variable, col = x5$variable,
ylim = c(0, max(x5$punctuation) * 1.1)),
y = x5$punctuation,
labels = paste0(x5$rank),
pos = 3,
offset = 0.5)
}
results <- list(x2,x3,x5)
return(results)
}
library(AHPGaussian)
ahpgaussian(warships)
ahpgaussian <- function(x) {{stopifnot(is.data.frame(x))
x2 <- reshape2::melt(x, id.vars = c(1,dim(x)[2]), measure.vars = -c(1, dim(x)[2]))
x2$value <- ifelse(x2$min_max == "min", 1 / x2$value, x2$value)
x2 <- transform(x2,sum = ave(value, criteria, FUN = sum))
x2 <- transform(x2,norm = value / sum)
x2 <- transform(x2,mean = ave(norm, criteria, FUN = mean))
x2 <- transform(x2,sd = ave(norm, criteria, FUN = sd))
x2 <- transform(x2,factor = sd / mean)
x3 <- unique(x2[, c("criteria", "factor")])
x3$factor <- x3$factor / sum(x3$factor)
x4 <- x2[, c("criteria", "variable", "norm")]
x4 <- reshape2::dcast(x4, formula = criteria ~ variable, value.var = "norm")
x5 <- merge(x4, x3, by = "criteria")
x5 <- reshape2::melt(x5, id.vars = c("criteria","factor"), measure.vars = -c(1, dim(x)[2]))
x5$value_factor <- x5$factor * x5$value
x5 <- x5[, c("criteria", "variable", "value_factor")]
x5$punctuation <- ave(x5$value_factor, x5$variable, FUN = sum)
x5 <- x5[, c("variable", "punctuation")]
x5$variable <- as.factor(x5$variable)
x5$variable <- reorder(x5$variable, -x5$punctuation)
x5 <- droplevels(unique(x5))
x5 <- x5[order(x5$variable), ]
x5$rank <- 1
x5$rank <- ave(x5$rank, FUN = cumsum)
text(x = barplot(x5$punctuation, names.arg = x5$variable, col = x5$variable,
ylim = c(0, max(x5$punctuation) * 1.1)),
y = x5$punctuation,
labels = paste0(x5$rank),
pos = 3,
offset = 0.5)
}
results <- list(table1=x2,table2=x3,table3=x5)
return(results)
}
ahpgaussian(warships)
teste <- ahpgaussian(warships)
teste$table1
teste$table1
teste$table2
teste$table3
ahpgaussian(mtcars)
ahpgaussian <- function(x) {
stopifnot(is.data.frame(x))
x2 <- reshape2::melt(x, id.vars = c(1,dim(x)[2]), measure.vars = -c(1, dim(x)[2]))
x2$value <- ifelse(x2$min_max == "min", 1 / x2$value, x2$value)
x2 <- transform(x2,sum = ave(value, criteria, FUN = sum))
x2 <- transform(x2,norm = value / sum)
x2 <- transform(x2,mean = ave(norm, criteria, FUN = mean))
x2 <- transform(x2,sd = ave(norm, criteria, FUN = sd))
x2 <- transform(x2,factor = sd / mean)
x3 <- unique(x2[, c("criteria", "factor")])
x3$factor <- x3$factor / sum(x3$factor)
x4 <- x2[, c("criteria", "variable", "norm")]
x4 <- reshape2::dcast(x4, formula = criteria ~ variable, value.var = "norm")
x5 <- merge(x4, x3, by = "criteria")
x5 <- reshape2::melt(x5, id.vars = c("criteria","factor"), measure.vars = -c(1, dim(x)[2]))
x5$value_factor <- x5$factor * x5$value
x5 <- x5[, c("criteria", "variable", "value_factor")]
x5$punctuation <- ave(x5$value_factor, x5$variable, FUN = sum)
x5 <- x5[, c("variable", "punctuation")]
x5$variable <- as.factor(x5$variable)
x5$variable <- reorder(x5$variable, -x5$punctuation)
x5 <- droplevels(unique(x5))
x5 <- x5[order(x5$variable), ]
x5$rank <- 1
x5$rank <- ave(x5$rank, FUN = cumsum)
text(x = barplot(x5$punctuation, names.arg = x5$variable, col = x5$variable,
ylim = c(0, max(x5$punctuation) * 1.1)),
y = x5$punctuation,
labels = paste0(x5$rank),
pos = 3,
offset = 0.5)
results <- list(table1=x2,table2=x3,table3=x5)
return(results)
}
ahpgaussian(mtcars)
ahpgaussian(warships)
library(AHPGaussian)
devtools::submit_cran()
library(TukeyC)
?TukeyC
TukeyC()
?TukeyC()
?TukeyC
?TukeyC()
ahpgaussian()
ahpgaussian
TukeyC
bpca
library(bpca)
bpca
?bpca
devtools::submit_cran()
library(AHPGaussian)
ws <- ahpgaussian(warships)
summary(ws)
summary.ahpgaussian(ws)
ahpgaussian(warships)
ahpgaussian.default(warships)
ahpgaussian(warships)
ws <- ahpgaussian(warships)
class(ws)
summary(ws)
ahpgaussian <- function(x, ...)
UseMethod('ahpgaussian', x)
summary.ahpgaussian <- function(object,
presentation=FALSE, ...)
{
if (!inherits(object, 'ahpgaussian'))
stop("Use this function only with 'ahpgaussian' class!")
if(!presentation){
d <- length(object$number)
x <- list('Table1' = object$table1,
'Table2' = object$table2,
'Table3' = object$table3)
class(x) <- c('summary.ahpgaussian', 'listof')
x
} else {
d <- length(object$number)
cat(' Table 1:\t\t\t\t',
object$table1)
cat('\n  - Table 2:\t\t\t\t',
object$table2)
cat('\n  - Table 3:\t\t\t\t',
object$table3)
cat('\n')
}
}
ahpgaussian.default <- function(x) {
stopifnot(is.data.frame(x))
x2 <- reshape2::melt(x, id.vars = c(1,dim(x)[2]), measure.vars = -c(1, dim(x)[2]))
x2$value <- ifelse(x2$min_max == "min", 1 / x2$value, x2$value)
x2 <- transform(x2,sum = ave(varlue, criteria, FUN = sum))
x2 <- transform(x2,norm = value / sum)
x2 <- transform(x2,mean = ave(norm, criteria, FUN = mean))
x2 <- transform(x2,sd = ave(norm, criteria, FUN = sd))
x2 <- transform(x2,factor = sd / mean)
x3 <- unique(x2[, c("criteria", "factor")])
x3$factor <- x3$factor / sum(x3$factor)
x4 <- x2[, c("criteria", "variable", "norm")]
x4 <- reshape2::dcast(x4, formula = criteria ~ variable, value.var = "norm")
x5 <- merge(x4, x3, by = "criteria")
x5 <- reshape2::melt(x5, id.vars = c("criteria","factor"), measure.vars = -c(1, dim(x)[2]))
x5$value_factor <- x5$factor * x5$value
x5 <- x5[, c("criteria", "variable", "value_factor")]
x5$punctuation <- ave(x5$value_factor, x5$variable, FUN = sum)
x5 <- x5[, c("variable", "punctuation")]
x5$variable <- as.factor(x5$variable)
x5$variable <- reorder(x5$variable, -x5$punctuation)
x5 <- droplevels(unique(x5))
x5 <- x5[order(x5$variable), ]
x5$rank <- 1
x5$rank <- ave(x5$rank, FUN = cumsum)
text(x = barplot(x5$punctuation, names.arg = x5$variable, col = x5$variable,
ylim = c(0, max(x5$punctuation) * 1.1)),
y = x5$punctuation,
labels = paste0(x5$rank),
pos = 3,
offset = 0.5)
results <- list(table1=x2,table2=x3,table3=x5)
class(results) <- c('ahpgaussian','list')
invisible(results)
}
ahpgaussian <- function(x) {
stopifnot(is.data.frame(x))
x2 <- reshape2::melt(x, id.vars = c(1,dim(x)[2]), measure.vars = -c(1, dim(x)[2]))
x2$value <- ifelse(x2$min_max == "min", 1 / x2$value, x2$value)
x2 <- transform(x2,sum = ave(value, criteria, FUN = sum))
x2 <- transform(x2,norm = value / sum)
x2 <- transform(x2,mean = ave(norm, criteria, FUN = mean))
x2 <- transform(x2,sd = ave(norm, criteria, FUN = sd))
x2 <- transform(x2,factor = sd / mean)
x3 <- unique(x2[, c("criteria", "factor")])
x3$factor <- x3$factor / sum(x3$factor)
x4 <- x2[, c("criteria", "variable", "norm")]
x4 <- reshape2::dcast(x4, formula = criteria ~ variable, value.var = "norm")
x5 <- merge(x4, x3, by = "criteria")
x5 <- reshape2::melt(x5, id.vars = c("criteria","factor"), measure.vars = -c(1, dim(x)[2]))
x5$value_factor <- x5$factor * x5$value
x5 <- x5[, c("criteria", "variable", "value_factor")]
x5$punctuation <- ave(x5$value_factor, x5$variable, FUN = sum)
x5 <- x5[, c("variable", "punctuation")]
x5$variable <- as.factor(x5$variable)
x5$variable <- reorder(x5$variable, -x5$punctuation)
x5 <- droplevels(unique(x5))
x5 <- x5[order(x5$variable), ]
x5$rank <- 1
x5$rank <- ave(x5$rank, FUN = cumsum)
text(x = barplot(x5$punctuation, names.arg = x5$variable, col = x5$variable,
ylim = c(0, max(x5$punctuation) * 1.1)),
y = x5$punctuation,
labels = paste0(x5$rank),
pos = 3,
offset = 0.5)
results <- list(table1=x2,table2=x3,table3=x5)
class(results) <- c('ahpgaussian','list')
invisible(results)
}
library(AHPGaussian)
ahpgaussian <- function(x) {
stopifnot(is.data.frame(x))
x2 <- reshape2::melt(x, id.vars = c(1,dim(x)[2]), measure.vars = -c(1, dim(x)[2]))
x2$value <- ifelse(x2$min_max == "min", 1 / x2$value, x2$value)
x2 <- transform(x2,sum = ave(value, criteria, FUN = sum))
x2 <- transform(x2,norm = value / sum)
x2 <- transform(x2,mean = ave(norm, criteria, FUN = mean))
x2 <- transform(x2,sd = ave(norm, criteria, FUN = sd))
x2 <- transform(x2,factor = sd / mean)
x3 <- unique(x2[, c("criteria", "factor")])
x3$factor <- x3$factor / sum(x3$factor)
x4 <- x2[, c("criteria", "variable", "norm")]
x4 <- reshape2::dcast(x4, formula = criteria ~ variable, value.var = "norm")
x5 <- merge(x4, x3, by = "criteria")
x5 <- reshape2::melt(x5, id.vars = c("criteria","factor"), measure.vars = -c(1, dim(x)[2]))
x5$value_factor <- x5$factor * x5$value
x5 <- x5[, c("criteria", "variable", "value_factor")]
x5$punctuation <- ave(x5$value_factor, x5$variable, FUN = sum)
x5 <- x5[, c("variable", "punctuation")]
x5$variable <- as.factor(x5$variable)
x5$variable <- reorder(x5$variable, -x5$punctuation)
x5 <- droplevels(unique(x5))
x5 <- x5[order(x5$variable), ]
x5$rank <- 1
x5$rank <- ave(x5$rank, FUN = cumsum)
text(x = barplot(x5$punctuation, names.arg = x5$variable, col = x5$variable,
ylim = c(0, max(x5$punctuation) * 1.1)),
y = x5$punctuation,
labels = paste0(x5$rank),
pos = 3,
offset = 0.5)
results <- list(table1=x2,table2=x3,table3=x5)
class(results) <- c('ahpgaussian','list')
invisible(results)
}
ahpgaussian(warships)
ws <- ahpgaussian(warships)
summary(ws)
ws
pkgname <- "AHPGaussian"
source(file.path(R.home("share"), "R", "examples-header.R"))
options(warn = 1)
options(pager = "console")
base::assign(".ExTimings", "AHPGaussian-Ex.timings", pos = 'CheckExEnv')
base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
base::assign(".format_ptime",
function(x) {
if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
options(OutDec = '.')
format(x[1L:3L], digits = 7L)
},
pos = 'CheckExEnv')
### * </HEADER>
library('AHPGaussian')
base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
cleanEx()
nameEx("ahpgaussian")
flush(stderr()); flush(stdout())
base::assign(".ptime", proc.time(), pos = "CheckExEnv")
ahpgaussian(warships)
base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
base::cat("ahpgaussian", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
cleanEx()
nameEx("summary.ahpgaussian")
flush(stderr()); flush(stdout())
base::assign(".ptime", proc.time(), pos = "CheckExEnv")
##
## Example 1
## ahpgaussian
##
# ahpgaussian
ws <- ahpgaussian(warships)
summary(ws)
base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
base::cat("summary.ahpgaussian", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
cleanEx()
nameEx("warships")
flush(stderr()); flush(stdout())
base::assign(".ptime", proc.time(), pos = "CheckExEnv")
data(warships)
warships
base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
base::cat("warships", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
### * <FOOTER>
###
cleanEx()
options(digits = 7L)
base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
grDevices::dev.off()
###
### Local variables: ***
### mode: outline-minor ***
### outline-regexp: "\\(> \\)?### [*]+" ***
### End: ***
quit('no')
library(AHPGaussian)
?ahpgaussian
?ahpgaussian.default
ahpgaussian.default(warships)
ahpgaussian(warships)
teste <- ahpgaussian(warships)
summary(teste)
teste
summary(teste)
library(AHPGaussian)
remove.packages("AHPGaussian")
